2025/08/28 19:48:12 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.20 (main, Oct  3 2024, 07:27:41) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: None
    GCC: gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
    PyTorch: 2.1.1+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.1+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/08/28 19:48:12 - mmengine - INFO - Config:
default_hooks = dict(
    checkpoint=dict(by_epoch=True, interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmpretrain'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = '/home/rh/Files/MS/HCCM/pretrain/xvlm_1xb24_hccm_epoch_6.pth'
log_level = 'INFO'
model = dict(
    bbox_head=dict(hidden_size=768, type='XVLM_BOXHead'),
    fast_match=False,
    init_cfg=dict(
        checkpoint='pretrain/16m_base_model_state_step_199999_(xvlm2mmcv).pth',
        type='Pretrained'),
    itc_head=dict(
        alpha=0.4,
        embed_dim=256,
        queue_size=57600,
        type='XVLM_ITC_MCD',
        use_distill=True),
    itm_head=dict(
        cal_acc=True, hidden_size=768, type='XVLM_ITMHead', with_pooler=False),
    max_tokens=90,
    text_encoder=dict(
        med_config=dict(
            add_cross_attention=True,
            architectures=[
                'BertForMaskedLM',
            ],
            attention_probs_dropout_prob=0.1,
            encoder_width=1024,
            fusion_layer=6,
            hidden_act='gelu',
            hidden_dropout_prob=0.1,
            hidden_size=768,
            initializer_range=0.02,
            intermediate_size=3072,
            layer_norm_eps=1e-12,
            max_position_embeddings=512,
            model_type='bert',
            num_attention_heads=12,
            num_hidden_layers=12,
            pad_token_id=0,
            type_vocab_size=2,
            vocab_size=30522),
        type='XVLM_XBert'),
    text_proj=dict(in_features=768, out_features=256, type='Linear'),
    tokenizer_path='pretrain/bert-base-uncased',
    topk=64,
    train_max_words=90,
    type='XVLMRetrieval_hccm',
    val_max_words=90,
    vision_encoder=dict(
        ape=False,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.1,
        drop_rate=0.0,
        embed_dim=128,
        img_size=384,
        in_chans=3,
        mlp_ratio=4.0,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        patch_norm=True,
        patch_size=4,
        qkv_bias=True,
        type='XVLM_SwinTransformer',
        use_checkpoint=False,
        window_size=12),
    vision_proj=dict(in_features=1024, out_features=256, type='Linear'),
    w_itc=0.25,
    w_itc_entis=0.25,
    w_itm=1,
    w_itm_entis=0.5)
optim_wrapper = dict(
    optimizer=dict(lr=3e-05, type='AdamW', weight_decay=0.01),
    paramwise_cfg=dict(bias_decay_mult=0.0, norm_decay_mult=0.0),
    type='OptimWrapper')
param_scheduler = [
    dict(
        by_epoch=False,
        end=1000,
        end_factor=1,
        start_factor=0.001,
        type='LinearLR'),
    dict(
        begin=1000,
        by_epoch=False,
        end_factor=1e-10,
        start_factor=1,
        type='LinearLR'),
]
rand_increasing_policies = [
    dict(type='AutoContrast'),
    dict(type='Equalize'),
    dict(
        magnitude_key='magnitude',
        magnitude_range=(
            0.1,
            1.8,
        ),
        type='Brightness'),
    dict(
        magnitude_key='magnitude',
        magnitude_range=(
            0.1,
            1.8,
        ),
        type='Sharpness'),
]
randomness = dict(deterministic=False, seed=1)
resume = False
test_cfg = dict(
    fast_datainfo=False,
    fp16=True,
    i2t=True,
    load_cpu=True,
    type='HDCRetrievalTestLoop')
test_dataloader = dict(
    batch_size=64,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='test.json',
        data_prefix=dict(img_path='images'),
        data_root='../datasets/ERA_Dataset',
        pipeline=[
            dict(imdecode_backend='pillow', type='LoadImageFromFile'),
            dict(
                backend='pillow',
                interpolation='bicubic',
                scale=(
                    384,
                    384,
                ),
                type='Resize'),
            dict(keys='text', type='CleanCaption'),
            dict(
                algorithm_keys=[
                    'text',
                    'gt_text_id',
                    'gt_image_id',
                ],
                meta_keys=[
                    'image_id',
                ],
                type='PackInputs'),
        ],
        test_mode=True,
        type='UAVDataset'),
    num_workers=16,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(subsample_type='sequential', type='SequentialSampler'))
test_evaluator = dict(
    topk=(
        1,
        5,
        10,
    ), type='RetrievalRecall')
test_pipeline = [
    dict(imdecode_backend='pillow', type='LoadImageFromFile'),
    dict(
        backend='pillow',
        interpolation='bicubic',
        scale=(
            384,
            384,
        ),
        type='Resize'),
    dict(keys='text', type='CleanCaption'),
    dict(
        algorithm_keys=[
            'text',
            'gt_text_id',
            'gt_image_id',
        ],
        meta_keys=[
            'image_id',
        ],
        type='PackInputs'),
]
train_cfg = dict(max_epochs=6, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file='train.json',
        data_prefix=dict(img_path='images'),
        data_root='../datasets/ERA_Dataset',
        pipeline=[
            dict(imdecode_backend='pillow', type='LoadImageFromFile'),
            dict(
                backend='pillow',
                interpolation='bicubic',
                scale=(
                    384,
                    384,
                ),
                type='Resize'),
            dict(
                magnitude_level=7,
                num_policies=2,
                policies=[
                    dict(type='AutoContrast'),
                    dict(type='Equalize'),
                    dict(
                        magnitude_key='magnitude',
                        magnitude_range=(
                            0.1,
                            1.8,
                        ),
                        type='Brightness'),
                    dict(
                        magnitude_key='magnitude',
                        magnitude_range=(
                            0.1,
                            1.8,
                        ),
                        type='Sharpness'),
                ],
                type='RandAugment'),
            dict(keys='text', type='CleanCaption'),
            dict(
                algorithm_keys=[
                    'text',
                    'is_matched',
                ],
                meta_keys=[
                    'image_id',
                ],
                type='PackInputs'),
        ],
        test_mode=False,
        type='UAVDataset'),
    drop_last=True,
    num_workers=16,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(imdecode_backend='pillow', type='LoadImageFromFile'),
    dict(
        backend='pillow',
        interpolation='bicubic',
        scale=(
            384,
            384,
        ),
        type='Resize'),
    dict(
        magnitude_level=7,
        num_policies=2,
        policies=[
            dict(type='AutoContrast'),
            dict(type='Equalize'),
            dict(
                magnitude_key='magnitude',
                magnitude_range=(
                    0.1,
                    1.8,
                ),
                type='Brightness'),
            dict(
                magnitude_key='magnitude',
                magnitude_range=(
                    0.1,
                    1.8,
                ),
                type='Sharpness'),
        ],
        type='RandAugment'),
    dict(keys='text', type='CleanCaption'),
    dict(
        algorithm_keys=[
            'text',
            'is_matched',
        ],
        meta_keys=[
            'image_id',
        ],
        type='PackInputs'),
]
val_cfg = dict(
    fast_datainfo=True,
    fp16=True,
    i2t=False,
    load_cpu=True,
    type='HDCRetrievalValLoop')
val_dataloader = dict(
    batch_size=64,
    dataset=dict(
        ann_file='test.json',
        data_prefix=dict(img_path='images'),
        data_root='../datasets/ERA_Dataset',
        pipeline=[
            dict(imdecode_backend='pillow', type='LoadImageFromFile'),
            dict(
                backend='pillow',
                interpolation='bicubic',
                scale=(
                    384,
                    384,
                ),
                type='Resize'),
            dict(keys='text', type='CleanCaption'),
            dict(
                algorithm_keys=[
                    'text',
                    'gt_text_id',
                    'gt_image_id',
                ],
                meta_keys=[
                    'image_id',
                ],
                type='PackInputs'),
        ],
        test_mode=True,
        type='UAVDataset'),
    num_workers=16,
    persistent_workers=True,
    sampler=dict(subsample_type='sequential', type='SequentialSampler'))
val_evaluator = dict(
    topk=(
        1,
        5,
        10,
    ), type='RetrievalRecall')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/xvlm_1xb24_hccm_ERAzeroshot'

2025/08/28 19:48:14 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/08/28 19:48:14 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/08/28 19:48:16 - mmengine - INFO - Load checkpoint from /home/rh/Files/MS/HCCM/pretrain/xvlm_1xb24_hccm_epoch_6.pth
2025/08/28 19:48:30 - mmengine - INFO - Epoch(test) [5/5]    i2t/retrieval/Recall@1: 20.9459  i2t/retrieval/Recall@5: 38.8514  i2t/retrieval/Recall@10: 54.0541  data_time: 0.7743  time: 1.1759
